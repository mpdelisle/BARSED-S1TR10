/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices        
(
    (0 0 0.001)
    (0.4 0 0.001)
    (0.4 0 -0.001)
    (0 0 -0.001)
    (0 0.048 0.001)
    (0.4 0.048 0.001)
    (0.4 0.048 -0.001)
    (0 0.048 -0.001)
    (0 0.096 0.001)
    (0.4 0.096 0.001)
    (0.4 0.096 -0.001)
    (0 0.096 -0.001)
    (0 0.144 0.001)
    (0.4 0.144 0.001)
    (0.4 0.144 -0.001)
    (0 0.144 -0.001)     
    (0 0.24 0.001) 
    (0.4 0.24 0.001)
    (0.4 0.24 -0.001)
    (0 0.24 -0.001)
);

blocks          
(
    hex (0 1 2 3 4 5 6 7) (1 1 240) simpleGrading (1 1 1)
    hex (4 5 6 7 8 9 10 11) (1 1 240) simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15) (1 1 240) simpleGrading (1 1 1) 
    hex (12 13 14 15 16 17 18 19) (1 1 480) simpleGrading (1 1 1)
);

edges           
(
);

boundary         
(
    inandouthalf11 
    {
     type   cyclic;
     neighbourPatch inandouthalf12;
     faces ((0 4 7 3));
    }
    inandouthalf12
    {
     type   cyclic;
     neighbourPatch  inandouthalf11;
     faces  ((5 1 2 6));
    }
    inandouthalf21
    {
     type cyclic;
     neighbourPatch  inandouthalf22;
     faces ((4 8 11 7));
    }
    inandouthalf22
    {
     type cyclic;
     neighbourPatch  inandouthalf21;
     faces ((5 6 10 9));
    }
    inandouthalf31
    {
     type cyclic;
     neighbourPatch  inandouthalf32;
     faces ((8 12 15 11));
    }
    inandouthalf32
    {
     type cyclic;
     neighbourPatch  inandouthalf31;
     faces ((9 10 14 13));
    }
    inandouthalf41
    {
     type cyclic;
     neighbourPatch  inandouthalf42;
     faces ((12 16 19 15));
    }
    inandouthalf42
    {
     type cyclic;
     neighbourPatch  inandouthalf41;
     faces ((13 14 18 17));
    }
    top
    { 
     type symmetryPlane;
        faces ((16 17 18 19));
    }
    walls 
    {
     type wall;
     faces ((0 3 2 1)); 
    }
    frontAndBackPlanes
    {
    type empty;
    faces (
           (0 1 5 4)
           (3 7 6 2)
           (4 5 9 8)
           (7 11 10 6)
           (8 9 13 12)
           (10 11 15 14)
           (12 13 17 16)
           (14 15 19 18)
          );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
